---
- name: Create Caddy dirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "{{ caddy_proxy_project_path }}"
    - "{{ caddy_proxy_project_path }}/data"
    - "{{ caddy_proxy_project_path }}/config"
    - "{{ caddy_proxy_project_path }}/pki"

- name: Check private CA root certificate presence
  ansible.builtin.stat:
    path: "{{ private_ca_root_cert_path }}"
  register: caddy_proxy_private_ca_root
  when: caddy_proxy_auto_https

- name: Ensure private CA root certificate exists
  ansible.builtin.fail:
    msg: |
      The private CA root certificate was not found at
      {{ private_ca_root_cert_path }}.
      Ensure the private_ca role ran successfully on the proxy host
      before configuring Caddy.
  when:
    - caddy_proxy_auto_https
    - not caddy_proxy_private_ca_root.stat.exists

- name: Distribute private CA root certificate to Caddy project
  ansible.builtin.copy:
    src: "{{ private_ca_root_cert_path }}"
    dest: "{{ caddy_proxy_project_path }}/pki/root_ca.crt"
    owner: root
    group: root
    mode: '0644'
    remote_src: true
  notify: Apply Caddy stack
  when: caddy_proxy_auto_https

- name: Render Caddyfile
  ansible.builtin.template:
    src: Caddyfile.j2
    dest: "{{ caddy_proxy_project_path }}/Caddyfile"
    owner: root
    group: root
    mode: '0644'
  notify: Apply Caddy stack

- name: Write docker-compose.yml for Caddy
  ansible.builtin.copy:
    dest: "{{ caddy_proxy_project_path }}/{{ caddy_proxy_compose_file }}"
    owner: root
    group: root
    mode: '0644'
    content: |
      services:
        caddy:
          image: {{ caddy_proxy_image }}
          container_name: caddy
          ports:
            - "80:80"
            - "443:443"
            - "443:443/udp"
          networks:
            - infra
            {% if caddy_proxy_auto_https %}
          environment:
            CADDY_TRUSTED_ROOTS: /etc/caddy/pki/root_ca.crt
            {% endif %}
          healthcheck:
            test: ["CMD", "caddy", "version"]
            interval: 30s
            timeout: 5s
            retries: 3
          volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile:ro
            - ./data:/data
            - ./config:/config
            - ./pki:/etc/caddy/pki:ro
          restart: unless-stopped
      networks:
        infra:
          external: true
          name: {{ docker_infra_network }}
  notify: Apply Caddy stack

- name: Ensure Caddy stack is running  # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: >-
      docker compose -f {{ caddy_proxy_compose_file }}
      up -d --remove-orphans
      {% if caddy_proxy_compose_pull in ['missing', 'always'] %}
      --pull {{ caddy_proxy_compose_pull }}
      {% endif %}
  args:
    chdir: "{{ caddy_proxy_project_path }}"
  register: caddy_proxy_compose
  failed_when: caddy_proxy_compose.rc != 0
  changed_when: >-
    caddy_proxy_compose.rc == 0 and (
      caddy_proxy_compose.stdout is search(
        '(?i)(Creating|Recreating|Starting|Started|Pulling|Downloading|Building|Removing)'
      )
      or caddy_proxy_compose.stderr is search(
        '(?i)(Creating|Recreating|Starting|Started|Pulling|Downloading|Building|Removing)'
      )
    )
