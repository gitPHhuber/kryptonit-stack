---
- name: Fail if unsupported OS family
  ansible.builtin.assert:
    that:
      - ansible_os_family in ['Debian']
    fail_msg: "Currently only Debian/Ubuntu family is supported."

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"

- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true
    force_apt_get: true
  when: ansible_os_family == 'Debian'
  register: docker_prereq_install
  retries: 10
  delay: 6
  until: docker_prereq_install is succeeded

- name: Resolve Docker channel
  ansible.builtin.set_fact:
    docker_repo_channel: "{{ 'ubuntu' if (ansible_distribution | lower) == 'ubuntu' else 'debian' }}"

- name: Ensure apt keyring directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when: ansible_os_family == 'Debian'

- name: Check Docker keyring presence
  ansible.builtin.stat:
    path: /etc/apt/keyrings/docker.gpg
  register: docker_keyring_stat
  when: ansible_os_family == 'Debian'

- name: Download Docker repository key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/{{ docker_repo_channel }}/gpg
    dest: /etc/apt/keyrings/docker.gpg.asc
    mode: '0644'
  register: docker_repo_key
  when: ansible_os_family == 'Debian'

- name: Convert Docker key to keyring format
  ansible.builtin.command:
    cmd: gpg --dearmor --yes --output /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.gpg.asc
  when: ansible_os_family == 'Debian' and (docker_repo_key.changed or not docker_keyring_stat.stat.exists)
  changed_when: docker_repo_key.changed or not docker_keyring_stat.stat.exists

- name: Ensure permissions on Docker keyring
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'
  when: ansible_os_family == 'Debian'

- name: Resolve Docker architecture
  ansible.builtin.set_fact:
    docker_repo_arch: "{{ docker_arch_map.get(ansible_architecture | default('amd64'), ansible_architecture | default('amd64')) }}"

- name: Add Docker repository
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/docker.list
    owner: root
    group: root
    mode: '0644'
    content: |
      deb [arch={{ docker_repo_arch }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ docker_repo_channel }} {{ ansible_distribution_release }} stable
  when: ansible_os_family == 'Debian'

- name: Refresh apt cache after adding Docker repo
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
  when: ansible_os_family == 'Debian'

- name: Check if docker-ce is available in APT
  ansible.builtin.command: apt-cache policy docker-ce
  register: docker_ce_policy
  changed_when: false
  failed_when: false
  when: ansible_os_family == 'Debian'

- name: Install Docker CE stack (official repo)
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  when:
    - ansible_os_family == 'Debian'
    - docker_ce_policy.stdout is search('Candidate:\\s+(?!none)')
  register: docker_ce_install
  retries: 10
  delay: 6
  until: docker_ce_install is succeeded

- name: Install Docker from Ubuntu repo (docker.io)
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true
    name: docker.io
    state: present
  when:
    - ansible_os_family == 'Debian'
    - docker_ce_policy.stdout is search('Candidate:\\s+none')
  register: docker_io_install
  retries: 10
  delay: 6
  until: docker_io_install is succeeded

- name: Ensure docker service is enabled & started
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Check for shared Docker network
  ansible.builtin.command:
    cmd: "docker network inspect {{ docker_infra_network }}"
  register: docker_network_inspect
  failed_when: false
  changed_when: false

- name: Create shared Docker network
  ansible.builtin.command:
    cmd: "docker network create {{ docker_infra_network }}"
  when: docker_network_inspect.rc != 0
  register: docker_network_create
  changed_when: docker_network_create.rc == 0
